(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{260:function(e,a,n){__NEXT_REGISTER_PAGE("/guides/materializations",function(){return e.exports=n(261),{page:e.exports.default}})},261:function(e,a,n){"use strict";n.r(a);var t=n(0),m=n.n(t),o=n(1),s=n(12);function r(e,a){if(null==e)return{};var n,t,m=function(e,a){if(null==e)return{};var n,t,m={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(m[n]=e[n]);return m}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(m[n]=e[n])}return m}a.default=function(e){var a=e.components,n=r(e,["components"]);return m.a.createElement(o.MDXTag,{name:"wrapper",Layout:function(e){var a=e.children;return m.a.createElement(s.a,{title:"Materializations"},a)},layoutProps:n,components:a},m.a.createElement(o.MDXTag,{name:"p",components:a},"A materialization defines a table, or view that will be created in your data warehouse."),m.a.createElement(o.MDXTag,{name:"p",components:a},"To define a new materialization, create a ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},".sql")," file in the ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"definitions")," directory. The name of the file will be the name of the table created in your data warehouse."),m.a.createElement(o.MDXTag,{name:"p",components:a},"For example, the file ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"definitions/example.sql")," with the contents:"),m.a.createElement(o.MDXTag,{name:"pre",components:a},m.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"hljs language-js",metaString:""}},"select ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-number"}},"1")," ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"as")," test")),m.a.createElement(o.MDXTag,{name:"p",components:a},"Will create a ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"view")," called ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"example")," in the default dataform schema defined in the ",m.a.createElement(o.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"/configuration/#dataform.json"}},m.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"a"},"dataform.json"))," file."),m.a.createElement(o.MDXTag,{name:"p",components:a},"There are many configuration options that can be applied to a materialization, for a full list see the ",m.a.createElement(o.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"/reference/materializations"}},"materializations reference"),"."),m.a.createElement(o.MDXTag,{name:"h2",components:a},"Tables"),m.a.createElement(o.MDXTag,{name:"p",components:a},"By default, materializations are created as views in your warehouse. To create a copy of the query result as table, you can use the ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"type")," method to change the materialization type to ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},'"table"'),"."),m.a.createElement(o.MDXTag,{name:"pre",components:a},m.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"hljs language-sql",metaString:""}},m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-comment"}},'--js type("table");'),"\n",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"select")," ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-number"}},"1")," ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"as")," ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"test"))),m.a.createElement(o.MDXTag,{name:"h2",components:a},"Incremental tables"),m.a.createElement(o.MDXTag,{name:"p",components:a},"Incremental tables allow you build a table incrementally, by only inserting data that has not yet been processed."),m.a.createElement(o.MDXTag,{name:"p",components:a},"In order to define an incremental table we must set the ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"type")," of the query to ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},'"incremental"'),", and provide a where clause."),m.a.createElement(o.MDXTag,{name:"p",components:a},"For example, if you have a timestamp field in a source table called ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"ts"),", then you can provide a where statement that means only rows that are newer than the latest value value of ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"ts")," in our output table. The ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"where")," function should be used inline as part of a query."),m.a.createElement("p",null,m.a.createElement("div",{class:"bp3-callout bp3-icon-info-sign bp3-intent-warning",markdown:"1"},"When using incremental tables, you must describe all the columns in the table, so that the correct insert statements can be generated.")),m.a.createElement(o.MDXTag,{name:"pre",components:a},m.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"hljs language-sql",metaString:""}},m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-comment"}},'/*js\ntype("incremental");\nwhere(`ts > (select max(ts) from ${self()}`);\ndescriptor("ts", "a", "b");\n*/'),"\n",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"select")," ts, a, b ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"from")," sourcetable")),m.a.createElement(o.MDXTag,{name:"p",components:a},"Incremental tables automatically produce the necessary ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"create table")," and ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"insert")," statements."),m.a.createElement(o.MDXTag,{name:"p",components:a},"For the above example, if the table does not exist the the following statement will be run:"),m.a.createElement(o.MDXTag,{name:"pre",components:a},m.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"hljs language-sql",metaString:""}},m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"create")," ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"or")," ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"replace")," ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"table")," dataform.incrementalexample ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"as"),"\n  ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"select")," ts, a, b\n  ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"from")," sourcetable")),m.a.createElement(o.MDXTag,{name:"p",components:a},"Subsequent runs will then run the following statement:"),m.a.createElement(o.MDXTag,{name:"pre",components:a},m.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"hljs language-sql",metaString:""}},m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"insert")," ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"into")," dataform.incrementalexample (ts, a, b)\n  ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"select")," ts, a, b\n  ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"from")," sourcetable\n  ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"where")," ts > (",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"select")," ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"max"),"(ts) ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"from")," dataform.incrementaltable)")),m.a.createElement(o.MDXTag,{name:"p",components:a},"It's important to note that incremental tables MUST specifically list selected fields, so that the insert statement can be automatically generated."),m.a.createElement(o.MDXTag,{name:"p",components:a},"The following would not work:"),m.a.createElement(o.MDXTag,{name:"pre",components:a},m.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"hljs language-sql",metaString:""}},m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-comment"}},'--js type("incremental");'),"\n",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"select")," * ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"from")," sourcetable")),m.a.createElement(o.MDXTag,{name:"h2",components:a},"Pre operations"),m.a.createElement(o.MDXTag,{name:"p",components:a},"You can execute one or more statements before a table is materialized using the ",m.a.createElement(o.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"/built-in-functions#preOps"}},m.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"a"},"preOps()"))," built-in:"),m.a.createElement(o.MDXTag,{name:"pre",components:a},m.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"hljs language-js",metaString:""}},m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-comment"}},'/*js\npreOps([\n  "run this before",\n  "then run this before"\n])\n*/'),"\nselect ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-number"}},"1")," ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"as")," test")),m.a.createElement(o.MDXTag,{name:"h2",components:a},"Post operations"),m.a.createElement(o.MDXTag,{name:"p",components:a},"You can execute one or more statements after a table is materialized using the ",m.a.createElement(o.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"/built-in-functions#postOps"}},m.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"a"},"postOps()"))," built-in:"),m.a.createElement(o.MDXTag,{name:"pre",components:a},m.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"hljs language-js",metaString:""}},m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-comment"}},'/*js\npostOps([\n  "run this after",\n  "then run this after"\n])\n*/'),"\nselect ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-number"}},"1")," ",m.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"as")," test")))}}},[[260,1,0]]]);